import React, { useState } from 'react';
import { View, TouchableOpacity, ScrollView, Linking, Image } from 'react-native';
import styles from './AnaliseResult.styles';
import CustomText from './CustomText'

const analysisData = [
  { id: '1', name: '–û–±—â–∏–π –∞–Ω–∞–ª–∏–∑ –∫—Ä–æ–≤–∏', date: '2025-05-10', result: '–í –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã', link: 'https://example.com/result1.pdf' },
  { id: '2', name: '–ú–æ—á–∞', date: '2025-05-12', result: '–ù–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è', link: 'https://example.com/result2.pdf' },
  { id: '3', name: '–ì–ª—é–∫–æ–∑–∞', date: '2025-05-15', result: '–ü–æ–≤—ã—à–µ–Ω–∞', link: 'https://example.com/result3.pdf' },
];

const AnaliseResult = ({ navigation, route }) => {
  const { iin } = route.params || {};
  const [visibleResults, setVisibleResults] = useState([]);

  const toggleResult = (id) => {
    setVisibleResults((prev) =>
      prev.includes(id) ? prev.filter((itemId) => itemId !== id) : [...prev, id]
    );
  };

  return (
    <View style={styles.container}>
      <View style={styles.profileContainer}>
        <TouchableOpacity style={styles.profileBtn} onPress={() => navigation.navigate('ProfileScreen', { iin })}>
          <Image source={require('../assets/profileicon.png')} style={styles.profileIicon} />
          <CustomText style={styles.profileBtnText}>–ü—Ä–æ—Ñ–∏–ª—å</CustomText>
        </TouchableOpacity>
      </View>

      <CustomText style={styles.title}>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–æ–≤</CustomText>

      <ScrollView style={styles.scroll}>
        {analysisData.map((item) => (
          <View key={item.id} style={styles.analysisItem}>
            <CustomText style={styles.analysisName}>{item.name}</CustomText>
            <CustomText style={styles.analysisDate}>–î–∞—Ç–∞: {item.date}</CustomText>

            <TouchableOpacity
              style={styles.resultButton}
              onPress={() => toggleResult(item.id)}
            >
              <CustomText style={styles.resultButtonText}>
                {visibleResults.includes(item.id) ? '–°–∫—Ä—ã—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç' : '–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç'}
              </CustomText>
            </TouchableOpacity>

            {visibleResults.includes(item.id) && (
              <TouchableOpacity onPress={() => Linking.openURL(item.link)}>
                <CustomText style={[styles.analysisResult, { color: 'blue', textDecorationLine: 'none' }]}>
                  üìé –°–∫–∞—á–∞—Ç—å PDF-–§–∞–π–ª
                </CustomText>
              </TouchableOpacity>
            )}
          </View>
        ))}
      </ScrollView>

      <View style={styles.NextButtonContainer}>
        <TouchableOpacity style={styles.NextButton} onPress={() => navigation.navigate('PriemScreen')}>
          <CustomText style={styles.NextButtonText}>üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏—ë–º</CustomText>
        </TouchableOpacity>
        <TouchableOpacity style={styles.NextButton} onPress={() => navigation.navigate('CallDoctorScreen')}>
          <CustomText style={styles.NextButtonText}>üè† –í—ã–∑–≤–∞—Ç—å –≤—Ä–∞—á–∞ –Ω–∞ –¥–æ–º</CustomText>
        </TouchableOpacity>
      </View>
    </View>
  );
};

export default AnaliseResult;
