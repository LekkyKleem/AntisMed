import React, { useState } from 'react';
import { View, TouchableOpacity, Alert, Image } from 'react-native';
import { Calendar, LocaleConfig } from 'react-native-calendars';
import styles from './Priem.styles';
import CustomText from './CustomText';

LocaleConfig.locales['ru'] = {
  monthNames: ['–Ø–Ω–≤–∞—Ä—å','–§–µ–≤—Ä–∞–ª—å','–ú–∞—Ä—Ç','–ê–ø—Ä–µ–ª—å',
    '–ú–∞–π','–ò—é–Ω—å','–ò—é–ª—å','–ê–≤–≥—É—Å—Ç',
    '–°–µ–Ω—Ç—è–±—Ä—å','–û–∫—Ç—è–±—Ä—å','–ù–æ—è–±—Ä—å','–î–µ–∫–∞–±—Ä—å',
  ],
  monthNamesShort: ['–Ø–Ω–≤.','–§–µ–≤—Ä.','–ú–∞—Ä—Ç','–ê–ø—Ä.','–ú–∞–π','–ò—é–Ω—å','–ò—é–ª—å','–ê–≤–≥.','–°–µ–Ω—Ç.','–û–∫—Ç.','–ù–æ—è–±.','–î–µ–∫.'],
  dayNames: [
    '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ','–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫','–í—Ç–æ—Ä–Ω–∏–∫','–°—Ä–µ–¥–∞','–ß–µ—Ç–≤–µ—Ä–≥','–ü—è—Ç–Ω–∏—Ü–∞','–°—É–±–±–æ—Ç–∞',
  ],
  dayNamesShort: ['–í—Å', '–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±'],
  today: '–°–µ–≥–æ–¥–Ω—è',
};

LocaleConfig.defaultLocale = 'ru';

const months = [
  '—è–Ω–≤–∞—Ä—è', '—Ñ–µ–≤—Ä–∞–ª—è', '–º–∞—Ä—Ç–∞', '–∞–ø—Ä–µ–ª—è', '–º–∞—è',
  '–∏—é–Ω—è', '–∏—é–ª—è', '–∞–≤–≥—É—Å—Ç–∞', '—Å–µ–Ω—Ç—è–±—Ä—è',
  '–æ–∫—Ç—è–±—Ä—è', '–Ω–æ—è–±—Ä—è', '–¥–µ–∫–∞–±—Ä—è',
];

const formatDateToRussian = (dateString) => {
  if (!dateString || typeof dateString !== 'string') return '';
  const [year, month, day] = dateString.split('-');
  const monthName = months[parseInt(month, 10) - 1];
  return `${parseInt(day, 10)} ${monthName}`;
};

const Priem = ({ navigation, route }) => {
  const { iin } = route.params || {};

  const [selectedDate, setSelectedDate] = useState(null);
  const [freeDates, setFreeDates] = useState([]);
  const [selectedTime, setSelectedTime] = useState(null);

  const exampleFreeDates = [
    { id: '1', date: '2025-05-25', time: '9:00' },
    { id: '2', date: '2025-05-25', time: '10:00' },
    { id: '3', date: '2025-05-25', time: '11:00' },
    { id: '4', date: '2025-05-25', time: '12:00' },
    { id: '5', date: '2025-05-25', time: '13:00' },
    { id: '6', date: '2025-05-25', time: '14:00' },
    { id: '7', date: '2025-05-26', time: '10:00' },
  ];

  const onDateSelect = (day) => {
    const dateString = day.dateString;
    setSelectedDate(dateString);
    setSelectedTime(null);

    const filteredFreeDates = exampleFreeDates.filter(
      (item) => item.date === dateString
    );

    setFreeDates(filteredFreeDates);
  };

  const bookFreeDate = (date, time) => {
    if (!date || !time) {
      Alert.alert('–û—à–∏–±–∫–∞', '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è.');
      return;
    }

    Alert.alert('–ó–∞–ø–∏—Å—å', `–í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ ${formatDateToRussian(date)}, ${time}`);
  };

  return (
    <View style={styles.container}>
      <View style={styles.profileContainer}>
        <TouchableOpacity style={styles.profileBtn} onPress={() => navigation.navigate('ProfileScreen', { iin })}>
          <Image source={require('../assets/profileicon.png')} style={styles.profileIicon} />
          <CustomText style={styles.profileBtnText}>–ü—Ä–æ—Ñ–∏–ª—å</CustomText>
        </TouchableOpacity>
      </View>

      <CustomText style={styles.title}>–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –∑–∞–ø–∏—Å–∏:</CustomText>

      <Calendar
        style={styles.calendar}
        markedDates={{
          [selectedDate]: { selected: true, selectedColor: '#4a90e2' },
        }}
        onDayPress={onDateSelect}
      />

      {freeDates.length > 0 ? (
        <>
          <CustomText style={[styles.title, { fontSize: 18 }]}>–î–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è:</CustomText>
          <View style={{ flexDirection: 'row', flexWrap: 'wrap', justifyContent: 'center' }}>
            {freeDates.map(({ id, time }) => (
              <TouchableOpacity
                key={id}
                style={[
                  styles.timeSlot,
                  selectedTime === time && styles.timeSlotSelected,
                ]}
                onPress={() => setSelectedTime(time)}
              >
                <CustomText style={styles.timeSlotText}>{time}</CustomText>
              </TouchableOpacity>
            ))}
          </View>
        </>
      ) : (
        selectedDate && (
          <CustomText style={{ marginTop: 25, fontSize: 14, textAlign: 'center' }}>
            –ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –≤—Ä–µ–º—ë–Ω –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã.
          </CustomText>
        )
      )}

      {freeDates.length > 0 && (
        <TouchableOpacity
          style={styles.bookButton}
          onPress={() => bookFreeDate(selectedDate, selectedTime)}
        >
          <CustomText style={styles.buttonText}>–ó–∞–ø–∏—Å–∞—Ç—å—Å—è</CustomText>
        </TouchableOpacity>
      )}

      <View style={styles.NextButtonContainer}>
        <TouchableOpacity style={styles.NextButton} onPress={() => navigation.navigate('CallDoctorScreen', { iin })}>
          <CustomText style={styles.NextButtonText}>üè† –í—ã–∑–≤–∞—Ç—å –≤—Ä–∞—á–∞ –Ω–∞ –¥–æ–º</CustomText>
        </TouchableOpacity>
        <TouchableOpacity style={styles.NextButton} onPress={() => navigation.navigate('AnaliseResultScreen', { iin })}>
          <CustomText style={styles.NextButtonText}>üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–æ–≤</CustomText>
        </TouchableOpacity>
      </View>
    </View>
  );
};

export default Priem;
